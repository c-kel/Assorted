%-Driver pre-generated by the Component Development Environment
%-      Copyright: 1997 - 2014 Freescale Semiconductor, Inc. All Rights Reserved. 
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Development Environment will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  
%define DriverVersion 01.00
%define DriverDate    09/30/2014
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%ifdef ExtInt_LDD
	%ifdef @ExtInt_LDD@OnInterrupt
		%define! Description_%@ExtInt_LDD@OnInterrupt This event is called when an active signal edge/level has occurred. The event services the event of the inherited component and eventually invokes other events.
		%endif %- @ExtInt_LDD@OnInterrupt
%endif %- ExtInt_LDD
%-BW_INTERN_COMMENTS_END
%-
%define CDEversion Community 
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
  %-
%-
%INTERFACE
%define! Settings Common\nRF24L01Settings.inc
%define! Abstract Common\nRF24L01Abstract.inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ... 
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES
#ifndef __CDEUserType_%'ModuleName'_Type
#define __CDEUserType_%'ModuleName'_Type
typedef char %'ModuleName'_Type;		%>40/*Type*/
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
#define %'ModuleName'_Constant 			%>40/**/
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger; 
%-
%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN Method
%ifdef Method
%include Common\nRF24L01Method.inc
void %'ModuleName'%.%Method();
%endif  %-Method
%-BW_METHOD_END Method

%-INHERITED_EVENT_BEGIN ExtInt_LDD OnInterrupt
%ifdef @ExtInt_LDD@OnInterrupt
void %@ExtInt_LDD@OnInterrupt(LDD_TUserData *UserDataPtr);

%endif %- @ExtInt_LDD@OnInterrupt
%-INHERITED_EVENT_END ExtInt_LDD OnInterrupt

%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif 
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN Event
%ifdef Event
%INTERFACE Event
void %Event();
%include Common\nRF24L01Event.inc
%endif %-Event
%-BW_METHOD_END Event
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\nRF24L01Settings.inc
%define! Abstract Common\nRF24L01Abstract.inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here 
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN Method
%ifdef Method
%include Common\nRF24L01Method.inc
void %'ModuleName'%.%Method()
{
%CODE_BEGIN
	/******Method is not fully implemented if you can see this comment*******/
%CODE_END
}
%endif %-Method
%-BW_METHOD_END Method

%-INHERITED_EVENT_BEGIN ExtInt_LDD OnInterrupt
%ifdef @ExtInt_LDD@OnInterrupt
%include Common\GeneralInternal.inc (OnInterrupt)
void %@ExtInt_LDD@OnInterrupt(LDD_TUserData *UserDataPtr)
{
%CODE_BEGIN
	/* Write your code here ... */
%CODE_END
}
%endif %- @ExtInt_LDD@OnInterrupt
%-INHERITED_EVENT_END ExtInt_LDD OnInterrupt

%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN Event
%ifdef Event
%IMPLEMENTATION Event
%include Common\nRF24L01Event.inc
void %Event()
{
%CODE_BEGIN
/******Write your code here*******/
%CODE_END
}
%endif %-Event
%-BW_METHOD_END Event

%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
